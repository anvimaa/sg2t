// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider  = "postgresql"
  // url       = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")

  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  lastLogin DateTime @default(now())
  updatedAt DateTime @updatedAt
  nome      String?
  username  String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  avatar    String?  @default("/dist/img/avatar.png")
  logs      Log[]
}

model Bairro {
  id        Int       @id @default(autoincrement())
  nome      String    @unique
  descricao String?
  markings  Marking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Categoria {
  id        Int       @id @default(autoincrement())
  nome      String
  descricao String?
  markings  Marking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Representa o espa√ßo ou terreno
model Marking {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  type         String
  geojson      String
  name         String
  code         String     @unique
  fillColor    String
  fillOpacity  Int
  color        String
  weight       Int
  bairroId     Int
  categoriaId  Int
  bairro       Bairro     @relation(fields: [bairroId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoria    Categoria? @relation(fields: [categoriaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  utenteId     Int?
  utente       Utente?    @relation(fields: [utenteId], references: [id])
  largura      Decimal?
  comprimento  Decimal?
  estado       String?    @default("Pendente")
  titulo       String?
  licenca      String?
  ref          String?
  isAssociated Boolean    @default(false)
  licencas     Licenca[]
}

model Utente {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  nome       String
  bi         String    @unique
  genero     String?
  nascimento DateTime?
  morada     String?
  foto       String?   @default("/dist/img/avatar.png")
  telefone   String?   @unique
  email      String?   @unique
  markings   Marking[]
}

model Licenca {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  descricao  String
  numero     String
  code       String?
  observacao String?
  markingId  Int?
  marking    Marking? @relation(fields: [markingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Settings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  appName   String?  @default("AMU")
  theme     String?  @default("dark-mode")
}

model Log {
  id           Int      @id @default(autoincrement())
  description  String
  success      Boolean
  route        String?
  errorMessage String?
  createdAt    DateTime @default(now())
  userId       Int?
  user         User?    @relation(fields: [userId], references: [id])
}

model Email {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}
